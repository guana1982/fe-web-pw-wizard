{"version":3,"file":"node_modules_angular_material_fesm2022_autocomplete_mjs-_d4db0.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,gBAAgB,CAAC;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;;AAGvB;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,GAAG;AACthC,OAAO;IAAEC,IAAI,EAAE,CAAC,CAAC;IAAqCF,IAAI;IAAEC,WAAW;IAAEE,OAAO,EAAE,CAAC;EAAE,CAAC;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAOA,CAACC,OAAO,EAAEC,MAAM,GAAG,IAAI,EAAE;EACrC,OAAO;IAAEJ,IAAI,EAAE,CAAC,CAAC;IAAqCI,MAAM;IAAED;EAAQ,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,KAAKA,CAACC,KAAK,EAAEL,OAAO,GAAG,IAAI,EAAE;EAClC,OAAO;IAAED,IAAI,EAAE,CAAC,CAAC;IAAmCM,KAAK;IAAEL;EAAQ,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASM,QAAQA,CAACD,KAAK,EAAEL,OAAO,GAAG,IAAI,EAAE;EACrC,OAAO;IAAED,IAAI,EAAE,CAAC,CAAC;IAAsCM,KAAK;IAAEL;EAAQ,CAAC;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,KAAKA,CAACC,MAAM,EAAE;EACnB,OAAO;IAAET,IAAI,EAAE,CAAC,CAAC;IAAmCI,MAAM,EAAEK,MAAM;IAAEC,MAAM,EAAE;EAAK,CAAC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAACb,IAAI,EAAEM,MAAM,EAAEH,OAAO,EAAE;EAClC,OAAO;IAAED,IAAI,EAAE,CAAC,CAAC;IAAmCF,IAAI;IAAEM,MAAM;IAAEH;EAAQ,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,SAASA,CAACN,KAAK,EAAE;EACtB,OAAO;IAAEN,IAAI,EAAE,CAAC,CAAC;IAAuCM;EAAM,CAAC;AACneAAe,EAAER,KAAK,EAAEL,OAAO,GAAG,IAAI,EAAE;EACxD,OAAO;IAAED,IAAI,EAAE,CAAC,CAAC;IAAwCe,IAAI,EAAED,eAAe;IAAEE,SAAS,EAAEV,KAAK;IAAEL;EAAQ,CAAC;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASe,SAASA,CAACV,KAAK,EAAEL,OAAO,GAAG,IAAI,EAAE;EACtC,OAAO;IAAED,IAAI,EAAE,CAAC,CAAC;IAAuCgB,SAAS,EAAEV,KAAK;IAAEL;EAAQ,CAAC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,YAAYA,CAAChB,OAAO,GAAG,IAAI,EAAE;EAClC,OAAO;IAAED,IAAI,EAAE,CAAC,CAAC;IAA0CC;EAAQ,CAAC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,YAAYA,CAACF,SAAS,EAAEf,OAAO,GAAG,IAAI,EAAE;EAC7C,OAAO;IAAED,IAAI,EAAE,EAAE,CAAC;IAAwCgB,SAAS;IAAEf;EAAQ,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkB,KAAKA,CAACC,QAAQ,EAAEJ,SAAS,EAAEf,OAAO,GAAG,IAAI,EAAE;EAChD,OAAO;IAAED,IAAI,EAAE,EAAE,CAAC;IAAmCoB,QAAQ;IAAEJ,SAAS;IAAEf;EAAQ,CAAC;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoB,OAAOA,CAAClB,OAAO,EAAEa,SAAS,EAAE;EACjC,OAAO;IAAEhB,IAAI,EAAE,EAAE,CAAC;IAAqCG,OAAO;IAAEa;EAAU,CAAC;AAC/E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,mBAAmB,CAAC;EACtBC,WAAWA,CAACC,QAAQ,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAE;IACjC,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CA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","sources":["./node_modules/@angular/animations/fesm2022/animations.mjs","./node_modules/@angular/material/fesm2022/autocomplete.mjs"],"sourcesContent":["/**\n * @license Angular v16.2.12\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code> method\n * to create a programmatic animation. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nclass AnimationBuilder {\n}\n/**\n * A factory object returned from the\n * <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>\n * method.\n *\n * @publicApi\n */\nclass AnimationFactory {\n}\n\n/**\n * Specifies automatic styling.\n *\n * @publicApi\n */\nconst AUTO_STYLE = '*';\n/**\n * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * @param name An identifying string.\n * @param definitions  An animation definition object, containing an array of\n * [`state()`](api/animations/state) and `transition()` declarations.\n *\n * @return An object that encapsulates the trigger data.\n *\n * @usageNotes\n * Define an animation trigger in the `animations` section of `@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```typescript\n * @Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```typescript\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```typescript\n * @Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [@.disabled]=\"isDisabled\">\n *       <div [@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\n *\n * ```typescript\n * import {Component, HostBinding} from '@angular/core';\n *\n * @Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   @HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * @publicApi\n */\nfunction trigger(name, definitions) {\n    return { type: 7 /* AnimationMetadataType.Trigger */, name, definitions, options: {} };\n}\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * @param timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @returns An object that encapsulates the animation step.\n *\n * @usageNotes\n * Call within an animation `sequence()`, `{@link animations/group group()}`, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```typescript\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```typescript\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" }),\n *   style({ background: \"red\" })\n *  ])\n * ```\n *\n * @publicApi\n */\nfunction animate(timings, styles = null) {\n    return { type: 4 /* AnimationMetadataType.Animate */, styles, timings };\n}\n/**\n * @description Defines a list of animation steps to be run in parallel.\n *\n * @param steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```typescript\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the group data.\n *\n * @usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * @publicApi\n */\nfunction group(steps, options = null) {\n    return { type: 3 /* AnimationMetadataType.Group */, steps, options };\n}\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * @param steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the sequence data.\n *\n * @usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the `{@link animations/group group()}` call, which runs animation steps in\n *parallel.\n *\n * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * @publicApi\n **/\nfunction sequence(steps, options = null) {\n    return { type: 2 /* AnimationMetadataType.Sequence */, steps, options };\n}\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation [`state`](api/animations/state), within an animation\n *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.\n *\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return An object that encapsulates the style data.\n *\n * @usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```typescript\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow an element to animate from\n * a height of 0 up to its full height:\n *\n * ```\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * @publicApi\n **/\nfunction style(tokens) {\n    return { type: 6 /* AnimationMetadataType.Style */, styles: tokens, offset: null };\n}\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * @param name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return An object that encapsulates the new state data.\n *\n * @usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * @publicApi\n **/\nfunction state(name, styles, options) {\n    return { type: 0 /* AnimationMetadataType.State */, name, styles, options };\n}\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * @param steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @returns An object that encapsulates the keyframes data.\n *\n * @usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```typescript\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n *```\n\n * @publicApi\n */\nfunction keyframes(steps) {\n    return { type: 5 /* AnimationMetadataType.Keyframes */, steps };\n}\n/**\n * Declares an animation transition which is played when a certain specified condition is met.\n *\n * @param stateChangeExpr A string with a specific format or a function that specifies when the\n * animation transition should occur (see [State Change Expression](#state-change-expression)).\n *\n * @param steps One or more animation objects that represent the animation's instructions.\n *\n * @param options An options object that can be used to specify a delay for the animation or provide\n * custom parameters for it.\n *\n * @returns An object that encapsulates the transition data.\n *\n * @usageNotes\n *\n * ### State Change Expression\n *\n * The State Change Expression instructs Angular when to run the transition's animations, it can\n *either be\n *  - a string with a specific syntax\n *  - or a function that compares the previous and current state (value of the expression bound to\n *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise\n *\n * The string format can be:\n *  - `fromState => toState`, which indicates that the transition's animations should occur then the\n *    expression bound to the trigger's element goes from `fromState` to `toState`\n *\n *    _Example:_\n *      ```typescript\n *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))\n *      ```\n *\n *  - `fromState <=> toState`, which indicates that the transition's animations should occur then\n *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa\n *\n *    _Example:_\n *      ```typescript\n *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))\n *      ```\n *\n *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the\n *    element enters or exists the DOM\n *\n *    _Example:_\n *      ```typescript\n *        transition(':enter', [\n *          style({ opacity: 0 }),\n *          animate('500ms', style({ opacity: 1 }))\n *        ])\n *      ```\n *\n *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when\n *    the numerical expression bound to the trigger's element has increased in value or decreased\n *\n *    _Example:_\n *      ```typescript\n *        transition(':increment', query('@counter', animateChild()))\n *      ```\n *\n *  - a sequence of any of the above divided by commas, which indicates that transition's animations\n *    should occur whenever one of the state change expressions matches\n *\n *    _Example:_\n *      ```typescript\n *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([\n *          style({ transform: 'scale(1)', offset: 0}),\n *          style({ transform: 'scale(1.1)', offset: 0.7}),\n *          style({ transform: 'scale(1)', offset: 1})\n *        ]))),\n *      ```\n *\n * Also note that in such context:\n *  - `void` can be used to indicate the absence of the element\n *  - asterisks can be used as wildcards that match any state\n *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is\n *    equivalent to `:leave`)\n *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match\n *    _truthy_ and _falsy_ values)\n *\n * <div class=\"alert is-helpful\">\n *\n *  Be careful about entering end leaving elements as their transitions present a common\n *  pitfall for developers.\n *\n *  Note that when an element with a trigger enters the DOM its `:enter` transition always\n *  gets executed, but its `:leave` transition will not be executed if the element is removed\n *  alongside its parent (as it will be removed \"without warning\" before its transition has\n *  a chance to be executed, the only way that such transition can occur is if the element\n *  is exiting the DOM on its own).\n *\n *\n * </div>\n *\n * ### Animating to a Final State\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no `style` data, that step is automatically considered the final animation arc,\n * for the element to reach the final state, in such case Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n *\n * ### Usage Examples\n *\n *  - Transition animations applied based on\n *    the trigger's expression value\n *\n *   ```HTML\n *   <div [@myAnimationTrigger]=\"myStatusExp\">\n *    ...\n *   </div>\n *   ```\n *\n *   ```typescript\n *   trigger(\"myAnimationTrigger\", [\n *     ..., // states\n *     transition(\"on => off, open => closed\", animate(500)),\n *     transition(\"* <=> error\", query('.indicator', animateChild()))\n *   ])\n *   ```\n *\n *  - Transition animations applied based on custom logic dependent\n *    on the trigger's expression value and provided parameters\n *\n *    ```HTML\n *    <div [@myAnimationTrigger]=\"{\n *     value: stepName,\n *     params: { target: currentTarget }\n *    }\">\n *     ...\n *    </div>\n *    ```\n *\n *    ```typescript\n *    trigger(\"myAnimationTrigger\", [\n *      ..., // states\n *      transition(\n *        (fromState, toState, _element, params) =>\n *          ['firststep', 'laststep'].includes(fromState.toLowerCase())\n *          && toState === params?.['target'],\n *        animate('1s')\n *      )\n *    ])\n *    ```\n *\n * @publicApi\n **/\nfunction transition(stateChangeExpr, steps, options = null) {\n    return { type: 1 /* AnimationMetadataType.Transition */, expr: stateChangeExpr, animation: steps, options };\n}\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * @param steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the animation data.\n *\n * @usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```typescript\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * @publicApi\n */\nfunction animation(steps, options = null) {\n    return { type: 8 /* AnimationMetadataType.Reference */, animation: steps, options };\n}\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return An object that encapsulates the child animation data.\n *\n * @usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * @publicApi\n */\nfunction animateChild(options = null) {\n    return { type: 9 /* AnimationMetadataType.AnimateChild */, options };\n}\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * @param animation The reusable animation to start.\n * @param options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return An object that contains the animation parameters.\n *\n * @publicApi\n */\nfunction useAnimation(animation, options = null) {\n    return { type: 10 /* AnimationMetadataType.AnimateRef */, animation, options };\n}\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * @param selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements (not\n *     all elements can be queried via these tokens, see\n *     [Entering and Leaving Elements](#entering-and-leaving-elements))\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return An object that encapsulates the query data.\n *\n * @usageNotes\n *\n * ### Multiple Tokens\n *\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```typescript\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Entering and Leaving Elements\n *\n * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones\n * that can are those that Angular assumes can enter/leave based on their own logic\n * (if their insertion/removal is simply a consequence of that of their parent they\n * should be queried via a different token in their parent's `:enter`/`:leave` transitions).\n *\n * The only elements Angular assumes can enter/leave based on their own logic (thus the only\n * ones that can be queried via the `:enter` and `:leave` tokens) are:\n *  - Those inserted dynamically (via `ViewContainerRef`)\n *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)\n *\n * <div class=\"alert is-helpful\">\n *\n *  Note that elements will be successfully queried via `:enter`/`:leave` even if their\n *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural\n *  directive (e.g. they enter/exit alongside their parent).\n *\n * </div>\n *\n * <div class=\"alert is-important\">\n *\n *  There is an exception to what previously mentioned, besides elements entering/leaving based on\n *  their own logic, elements with an animation trigger can always be queried via `:leave` when\n * their parent is also leaving.\n *\n * </div>\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```typescript\n * @Component({\n *   selector: 'inner',\n *   template: `\n *     <div [@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 }))),\n *        query('.content', animate(1000, style({ opacity: 1 }))),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nfunction query(selector, animation, options = null) {\n    return { type: 11 /* AnimationMetadataType.Query */, selector, animation, options };\n}\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * @param timings A delay value.\n * @param animation One ore more animation steps.\n * @returns An object that encapsulates the stagger data.\n *\n * @usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `ngFor`. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```typescript\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\n * @Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```typescript\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * @publicApi\n */\nfunction stagger(timings, animation) {\n    return { type: 12 /* AnimationMetadataType.Stagger */, timings, animation };\n}\n\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see {@link animate}\n * @see {@link AnimationPlayer}\n * @see {@link ɵAnimationGroupPlayer AnimationGroupPlayer}\n *\n * @publicApi\n */\nclass NoopAnimationPlayer {\n    constructor(duration = 0, delay = 0) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._originalOnDoneFns = [];\n        this._originalOnStartFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this._position = 0;\n        this.parentPlayer = null;\n        this.totalTime = duration + delay;\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    onStart(fn) {\n        this._originalOnStartFns.push(fn);\n        this._onStartFns.push(fn);\n    }\n    onDone(fn) {\n        this._originalOnDoneFns.push(fn);\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    hasStarted() {\n        return this._started;\n    }\n    init() { }\n    play() {\n        if (!this.hasStarted()) {\n            this._onStart();\n            this.triggerMicrotask();\n        }\n        this._started = true;\n    }\n    /** @internal */\n    triggerMicrotask() {\n        queueMicrotask(() => this._onFinish());\n    }\n    _onStart() {\n        this._onStartFns.forEach(fn => fn());\n        this._onStartFns = [];\n    }\n    pause() { }\n    restart() { }\n    finish() {\n        this._onFinish();\n    }\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    reset() {\n        this._started = false;\n        this._finished = false;\n        this._onStartFns = this._originalOnStartFns;\n        this._onDoneFns = this._originalOnDoneFns;\n    }\n    setPosition(position) {\n        this._position = this.totalTime ? position * this.totalTime : 1;\n    }\n    getPosition() {\n        return this.totalTime ? this._position / this.totalTime : 1;\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see {@link AnimationPlayer}\n * @see {@link animations/group group}\n *\n */\nclass AnimationGroupPlayer {\n    constructor(_players) {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        this.totalTime = 0;\n        this.players = _players;\n        let doneCount = 0;\n        let destroyCount = 0;\n        let startCount = 0;\n        const total = this.players.length;\n        if (total == 0) {\n            queueMicrotask(() => this._onFinish());\n        }\n        else {\n            this.players.forEach(player => {\n                player.onDone(() => {\n                    if (++doneCount == total) {\n                        this._onFinish();\n                    }\n                });\n                player.onDestroy(() => {\n                    if (++destroyCount == total) {\n                        this._onDestroy();\n                    }\n                });\n                player.onStart(() => {\n                    if (++startCount == total) {\n                        this._onStart();\n                    }\n                });\n            });\n        }\n        this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(fn => fn());\n            this._onDoneFns = [];\n        }\n    }\n    init() {\n        this.players.forEach(player => player.init());\n    }\n    onStart(fn) {\n        this._onStartFns.push(fn);\n    }\n    _onStart() {\n        if (!this.hasStarted()) {\n            this._started = true;\n            this._onStartFns.forEach(fn => fn());\n            this._onStartFns = [];\n        }\n    }\n    onDone(fn) {\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    hasStarted() {\n        return this._started;\n    }\n    play() {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this.players.forEach(player => player.play());\n    }\n    pause() {\n        this.players.forEach(player => player.pause());\n    }\n    restart() {\n        this.players.forEach(player => player.restart());\n    }\n    finish() {\n        this._onFinish();\n        this.players.forEach(player => player.finish());\n    }\n    destroy() {\n        this._onDestroy();\n    }\n    _onDestroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this.players.forEach(player => player.destroy());\n            this._onDestroyFns.forEach(fn => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    reset() {\n        this.players.forEach(player => player.reset());\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    setPosition(p) {\n        const timeAtPosition = p * this.totalTime;\n        this.players.forEach(player => {\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        });\n    }\n    getPosition() {\n        const longestPlayer = this.players.reduce((longestSoFar, player) => {\n            const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n            return newPlayerIsLongest ? player : longestSoFar;\n        }, null);\n        return longestPlayer != null ? longestPlayer.getPosition() : 0;\n    }\n    beforeDestroy() {\n        this.players.forEach(player => {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        });\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach(fn => fn());\n        methods.length = 0;\n    }\n}\n\nconst ɵPRE_STYLE = '!';\n\n/**\n * @module\n * @description\n * Entry point for all animation APIs of the animation package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTO_STYLE, AnimationBuilder, AnimationFactory, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ActiveDescendantKeyManager, addAriaReferencedId, removeAriaReferencedId } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport { trigger, state, style, transition, group, animate } from '@angular/animations';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { ESCAPE, hasModifierKey, UP_ARROW, ENTER, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n// Animation values come from\n// https://github.com/material-components/material-components-web/blob/master/packages/mdc-menu-surface/_mixins.scss\n// TODO(mmalerba): Ideally find a way to import the values from MDC's code.\nconst panelAnimation = trigger('panelAnimation', [\n    state('void, hidden', style({\n        opacity: 0,\n        transform: 'scaleY(0.8)',\n    })),\n    transition(':enter, hidden => visible', [\n        group([\n            animate('0.03s linear', style({ opacity: 1 })),\n            animate('0.12s cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scaleY(1)' })),\n        ]),\n    ]),\n    transition(':leave, visible => hidden', [animate('0.075s linear', style({ opacity: 0 }))]),\n]);\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n    };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._setThemeClasses(this._classList);\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() {\n        return this._autoActiveFirstOption;\n    }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /** Whether the active option should be selected as the user is navigating. */\n    get autoSelectActiveOption() {\n        return this._autoSelectActiveOption;\n    }\n    set autoSelectActiveOption(value) {\n        this._autoSelectActiveOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the user is required to make a selection when they're interacting with the\n     * autocomplete. If the user moves away from the autocomplete without selecting an option from\n     * the list, the value will be reset. If the user opens the panel and closes it without\n     * interacting or selecting a value, the initial value will be kept.\n     */\n    get requireSelection() {\n        return this._requireSelection;\n    }\n    set requireSelection(value) {\n        this._requireSelection = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._setThemeClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    constructor(_changeDetectorRef, _elementRef, _defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._defaults = _defaults;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this._autoActiveFirstOption = !!_defaults.autoActiveFirstOption;\n        this._autoSelectActiveOption = !!_defaults.autoSelectActiveOption;\n        this._requireSelection = !!_defaults.requireSelection;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n    /** Sets the theming classes on a classlist based on the theme of the panel. */\n    _setThemeClasses(classList) {\n        classList['mat-primary'] = this._color === 'primary';\n        classList['mat-warn'] = this._color === 'warn';\n        classList['mat-accent'] = this._color === 'accent';\n    }\n    _skipPredicate(option) {\n        return option.disabled;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", autoSelectActiveOption: \"autoSelectActiveOption\", requireSelection: \"requireSelection\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }, { type: i1.Platform }]; }, propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], autoSelectActiveOption: [{\n                type: Input\n            }], requireSelection: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }] } });\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-mdc-autocomplete-visible';\n        this._hiddenClass = 'mat-mdc-autocomplete-hidden';\n        this._animationDone = new EventEmitter();\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = coerceBooleanProperty(value);\n        this._syncParentProperties();\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._animationDone.complete();\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate(_option) {\n        return false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\", hideSingleSelectionIndicator: \"hideSingleSelectionIndicator\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [panelAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                        'class': 'mat-mdc-autocomplete',\n                        'ngSkipHydration': '',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], animations: [panelAnimation], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    [@panelAnimation]=\\\"isOpen ? 'visible' : 'hidden'\\\"\\n    (@panelAnimation.done)=\\\"_animationDone.next($event)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12);width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-autocomplete-background-color)}.cdk-high-contrast-active div.mat-mdc-autocomplete-panel{outline:solid 1px}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden}mat-autocomplete{display:none}\"] }]\n        }], propDecorators: { optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input\n            }] } });\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteOriginBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        /** Handles keyboard events coming from the overlay panel. */\n        this._handlePanelKeydown = (event) => {\n            // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n            // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n            if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                // If the user had typed something in before we autoselected an option, and they decided\n                // to cancel the selection, restore the input value to the one they had typed in.\n                if (this._pendingAutoselectedOption) {\n                    this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                    this._pendingAutoselectedOption = null;\n                }\n                this._closeKeyEventStream.next();\n                this._resetActiveItem();\n                // We need to stop propagation, otherwise the event will eventually\n                // reach the input itself and cause the overlay to be reopened.\n                event.stopPropagation();\n                event.preventDefault();\n            }\n        };\n        /**\n         * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n         * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n         * panel. Track the modal we have changed so we can undo the changes on destroy.\n         */\n        this._trackedModal = null;\n        this._scrollStrategy = scrollStrategy;\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // The `NgZone.onStable` always emits outside of the Angular zone,\n            // so all the subscriptions from `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._element.nativeElement.value;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this._updatePanelState();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                }\n                if (wasOpen !== this.panelOpen) {\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                    // `closed` event, because we may not have emitted it. This can happen\n                    // - if the users opens the panel and there are no options, but the\n                    //   options come in slightly later or as a result of the value changing,\n                    // - if the panel is closed after the user entered a string that did not match any\n                    //   of the available options,\n                    // - if a valid string is entered after an invalid one.\n                    if (this.panelOpen) {\n                        this._captureValueOnAttach();\n                        this._emitOpened();\n                    }\n                    else {\n                        this.autocomplete.closed.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Intended to be called when the panel is attached. Captures the current value of the input. */\n    _captureValueOnAttach() {\n        this._valueOnAttach = this._element.nativeElement.value;\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            // Wait for the animation to finish before clearing the form control value, otherwise\n            // the options might change while the animation is running which looks glitchy.\n            if (panel._animationDone) {\n                panel._animationDone.pipe(take(1)).subscribe(() => this._onChange(null));\n            }\n            else {\n                this._onChange(null);\n            }\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _attachOverlay() {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        this._captureValueOnAttach();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            panelClass: this._defaults?.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document?.defaultView || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                }] }, { type: i2$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i4.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }, {\n                    type: Host\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: ['matAutocompleteDisabled']\n            }] } });\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-mdc-autocomplete-panel-above';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }] });\n\nclass MatAutocompleteModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n"],"names":["AnimationBuilder","AnimationFactory","AUTO_STYLE","trigger","name","definitions","type","options","animate","timings","styles","group","steps","sequence","style","tokens","offset","state","keyframes","transition","stateChangeExpr","expr","animation","animateChild","useAnimation","query","selector","stagger","NoopAnimationPlayer","constructor","duration","delay","_onDoneFns","_onStartFns","_onDestroyFns","_originalOnDoneFns","_originalOnStartFns","_started","_destroyed","_finished","_position","parentPlayer","totalTime","_onFinish","forEach","fn","onStart","push","onDone","onDestroy","hasStarted","init","play","_onStart","triggerMicrotask","queueMicrotask","pause","restart","finish","destroy","reset","setPosition","position","getPosition","triggerCallback","phaseName","methods","length","AnimationGroupPlayer","_players","players","doneCount","destroyCount","startCount","total","player","_onDestroy","reduce","time","Math","max","p","timeAtPosition","min","longestPlayer","longestSoFar","newPlayerIsLongest","beforeDestroy","ɵPRE_STYLE","ɵAnimationGroupPlayer","i0","InjectionToken","EventEmitter","TemplateRef","Directive","Inject","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","i2","DOCUMENT","CommonModule","i3","CdkScrollableModule","i1$1","Overlay","OverlayConfig","OverlayModule","ActiveDescendantKeyManager","addAriaReferencedId","removeAriaReferencedId","coerceBooleanProperty","coerceStringArray","i1","_getEventTarget","Subscription","Subject","defer","merge","of","fromEvent","ESCAPE","hasModifierKey","UP_ARROW","ENTER","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","startWith","switchMap","take","filter","map","tap","i2$1","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","_r4","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","MatAutocomplete_ng_template_0_Template_div_animation_panelAnimation_done_0_listener","$event","ɵɵrestoreView","ctx_r3","ɵɵnextContext","ɵɵresetView","_animationDone","next","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵproperty","_classList","isOpen","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","panelAnimation","opacity","transform","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","_MatAutocompleteBase","_isOpen","showPanel","_setColor","value","_color","_setThemeClasses","_autoActiveFirstOption","_autoSelectActiveOption","_requireSelection","classList","className","_setVisibilityClasses","_elementRef","nativeElement","_changeDetectorRef","_defaults","platform","_activeOptionChanges","EMPTY","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","ngAfterContentInit","_keyManager","withWrap","skipPredicate","_skipPredicate","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","disabled","_","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ElementRef","Platform","_2","ɵdir","ɵɵdefineDirective","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","undefined","decorators","args","static","MatAutocomplete","arguments","_hideSingleSelectionIndicator","_syncParentProperties","complete","_option","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","encapsulation","data","changeDetection","None","OnPush","host","providers","animations","descendants","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","_MatAutocompleteTriggerBase","autocompleteDisabled","_autocompleteDisabled","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_componentDestroyed","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","changes","pipe","onSelectionChange","onStable","_handlePanelKeydown","keyCode","_pendingAutoselectedOption","_updateNativeInputValue","_valueBeforeAutoSelection","_resetActiveItem","stopPropagation","preventDefault","_trackedModal","_scrollStrategy","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","_clearFromModal","openPanel","_attachOverlay","_floatLabel","panelId","closePanel","_resetLabel","run","hasAttached","detach","_closingActionsSubscription","_updatePanelState","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","_handleKeydown","hasModifier","_selectViaInteraction","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_clearPreviousSelectedOption","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_captureValueOnAttach","_emitOpened","_setValueAndClose","_valueOnAttach","dispose","toDisplay","_control","toSelect","focus","skip","emitEvent","selected","deselect","overlayRef","_portal","getLabelId","create","_getOverlayConfig","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","color","_applyModalPanelOwnership","_keydownSubscription","keydownEvents","_outsideClickSubscription","outsidePointerEvents","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","modal","closest","_MatAutocompleteTriggerBase_Factory","ViewContainerRef","NgZone","Directionality","ViewportRuler","ɵɵNgOnChangesFeature","MatFormField","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","MatAutocompleteTrigger_keydown_HostBindingHandler","MatAutocompleteTrigger_click_HostBindingHandler","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","imports","exports","declarations"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}